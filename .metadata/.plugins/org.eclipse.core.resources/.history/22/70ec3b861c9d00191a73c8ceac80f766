package Server;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.Iterator;

import Message.Message;
import Message.ServerSocketForObject;

public class EventManager implements Runnable {
	
	public Selector selector;
	private FileServer server;
	public ServerSocketChannel serverSocketChannel;
	
	public EventManager(FileServer fileServer) {
		this.server = fileServer;
		this.server.eventManager = this;
	}

	public void run() {
		try {

			selector = Selector.open();
			serverSocketChannel = ServerSocketChannel.open();
			serverSocketChannel.configureBlocking(false);// 블로킹방식
			serverSocketChannel.bind(new InetSocketAddress(server.serverPort));
			serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);

			System.out.println("[" + server.serverName + ":" + server.serverPort +"] Server Start");

		} catch (Exception e) {
			System.out.println("[Exception] " +  e);
			if(serverSocketChannel.isOpen()) {
				server.stopServer();
			}
//			e.printStackTrace();
		}
		
		while (true) {
			try{
				System.out.println("Waiting select..");
				selector.select();
				System.out.println("Get selected!");
				
				Iterator<SelectionKey> iteratorKey = selector.selectedKeys().iterator();
				
				while(iteratorKey.hasNext()){
					SelectionKey key = (SelectionKey) iteratorKey.next();
					
					if(!key.isValid()){
						continue;
					}
					if(key.isAcceptable()){
						accept(key);
					}
					else if(key.isReadable()){
						readData(key);
					}
					
					iteratorKey.remove();
				} 
				
			}catch (IOException e){
				e.printStackTrace();
			}

		}
	}
	
	private void accept(SelectionKey key){
		System.out.println("Accept");
		try{
			ServerSocketChannel serverChannel = (ServerSocketChannel) key.channel();
			SocketChannel channel= serverChannel.accept();
			
			System.out.println("[Connect OK: "+ channel.getRemoteAddress() + ": " + Thread.currentThread().getName() + "]");
			
			channel.configureBlocking(false);
			channel.register(selector, SelectionKey.OP_READ);
			System.out.println(channel.toString() + " client is connected");
		}
		catch(IOException e){
			e.printStackTrace();
		}
	}
	
	private void readData(SelectionKey key) throws IOException{
		SocketChannel channel = (SocketChannel) key.channel();
		
		try{
			ServerSocketForObject sock = new ServerSocketForObject(channel);
			Message msg = (Message)sock.recv();
			
			if (msg == null) {
				channel.close();
				key.cancel();
			}
			
			msg.fileServer = this.server;
			System.out.println("socket: " + channel.getRemoteAddress());
			Message resMsg = msg.handle();
			
			
	
			if(resMsg == null){
				return;
			}
			
			sock = new ServerSocketForObject(channel);
			sock.send(resMsg);
		}
		catch(IOException e){
			System.out.println("[Exception] " + e);
			e.printStackTrace();
			try {
				channel.close();
			} catch (IOException e1) {
				e1.printStackTrace();
			}
			key.cancel();
			System.out.println("Connection closed.");
			return;
		}
	}
}


//int numRead = -1;
//numRead = channel.read(buffer); // return value 가 -1 이면 끊긴것 
//if(numRead == -1){
//	System.out.println("numRead is -1");
//	channel.close();
//	key.cancel();
//	return;
//}
//
