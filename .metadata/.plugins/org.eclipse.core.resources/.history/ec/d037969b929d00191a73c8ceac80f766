package Parser;
import java.io.File;
import java.io.FileInputStream;
import java.nio.channels.SelectionKey;
import java.nio.channels.SocketChannel;

import Message.FileRequestMessage;
import Message.FileTransferMessage;
import Message.CommandCode;
import Message.ServerSocketForObject;
import Server.FileServer;


public class FileServerParser {
	FileServer fileServer;
	
	public FileServerParser(FileServer server){
		this.fileServer = server;
	}

	public String parse(String cmd) throws Exception {
		FunctionCall func = new FunctionCall();
		String sp[] = cmd.split(" ");
		String response = "";
		
		switch (sp[0].toUpperCase()) {
		case CommandCode.CONNECT_TO:
			int len = sp.length;
			String tmpPath = "";
			
			if(this.fileServer.remoteServer != null){
				System.out.println("Already connected!");
				response = "Already connected.";
				break;
			}
			
			if(sp.length != 1){
				response = "Wrong command";
				break;
			}
			
			tmpPath = this.fileServer.configParameters.get("RemoteIpPort");

			System.out.println("Connect to " + tmpPath);
			String ipPort[] = tmpPath.split(":");
			if(ipPort.length != 2){
				response = "Wrong Message";
			}
			String ip = ipPort[0];
			String port = ipPort[1];
			SocketChannel remoteChannel = func.RequireConnect(ip,port);
			if(remoteChannel == null){
				// 연결실패
				response = "Failed Connection";
			}
			else{
				this.fileServer.remoteServer = remoteChannel;
				response = "Success Connection";
			}
			
			remoteChannel.configureBlocking(false);
			remoteChannel.register(fileServer.eventManager.selector, SelectionKey.OP_READ);
			
			break;
		case CommandCode.PUSH_FILE:
			
			FileInputStream fin;
			
			if(this.fileServer.remoteServer == null){
				response = "Require to CONNECT First";
			}
			else{
				if(sp.length != 2){
					response = "Enter the filename";
				}
				else{
					System.out.println("Try to send file (filename: " + sp[1] + ")");
					
					long fileSize;
					String filePath = this.fileServer.configParameters.get("FileRepository") + "\\" + sp[1];
					System.out.println(filePath);
					File sendFile = new File(filePath);
					
					if(!sendFile.exists()){
						response = "No Such File exists. PATH: " + filePath;
						break;
					}
					
					fileSize = sendFile.length();
					fin = new FileInputStream(sendFile);
					byte[] buffer = new byte[(int) fileSize];
					int data = fin.read(buffer);
					
					if (fileSize != data) {
						response = "Critical Error!!";
						break;
					}
					
					fin.close();
					
					FileTransferMessage ftMsg = new FileTransferMessage(fileSize, sp[1], buffer,Boolean.parseBoolean(this.fileServer.configParameters.get("FileDataEncrypt")));
					
					ServerSocketForObject sock = new ServerSocketForObject(fileServer.remoteServer);
					sock.send(ftMsg);
					
					response = "Sent File[" + filePath + "] to remote server.";
				}
			}
			
			break;
		case CommandCode.PULL_FILE:
			if(this.fileServer.remoteServer == null){
				response = "Require to CONNECT First";
			}
			else{
				if(sp.length != 2){
					response = "Enter the filename";
				}
				else{
					String fileName=sp[1];
					
					FileRequestMessage fReqMsg = new FileRequestMessage(fileName);
					ServerSocketForObject sock = new ServerSocketForObject(this.fileServer.remoteServer);
					sock.send(fReqMsg);
					response = "File request success";
				}
			}
			
			break;
		case CommandCode.GET_FILELIST:
			if(this.fileServer.remoteServer == null){
				response = "Require to CONNECT First";
			}
			else {
				if(sp.length != 1) {
					response = "Wrong LS Command";
				}
				else {
					String filePath = this.fileServer.configParameters.get("FileRepository");
					File dirFile = new File(filePath);
					File []fileList = dirFile.listFiles();
					System.out.println("filePath: "+filePath);
					response = "This is FileList";
					for(File tempFile : fileList) {
						if(tempFile.isFile()) {
							String tempFileName = tempFile.getName();
							response += "\n " + tempFileName;
							System.out.println("fileName: "+tempFileName);
						}
					}
					
					response += "\n---------FileList End---------";
				}
			}
			
			break;
		case CommandCode.STOP_SERVER:
			response = "Terminate process is start";
//			System.exit(0);
			this.fileServer.stopServer();
		default:
			response = "Unknown Protocol";
			System.out.println("Unknown Protocol");
		}
		
		return response;
	}
}
