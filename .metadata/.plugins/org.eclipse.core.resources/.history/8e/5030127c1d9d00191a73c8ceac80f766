package Message;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;

public class ServerSocketForObject {
	SocketChannel channel;

	public ServerSocketForObject(SocketChannel socketChannel) {
		channel = socketChannel;
	}

	public void send(Message message) throws IOException {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		for (int i = 0; i < 4; i++)
			baos.write(0);
		ObjectOutputStream oos = new ObjectOutputStream(baos);
		oos.writeObject(message);
		oos.close();
		final ByteBuffer wrap = ByteBuffer.wrap(baos.toByteArray());
		wrap.putInt(0, baos.size() - 4);
		channel.write(wrap);
	}

	private final ByteBuffer lengthByteBuffer = ByteBuffer.wrap(new byte[4]);
	private ByteBuffer dataByteBuffer = null;
	private boolean readLength = true;

	public Serializable recv() {
		try {
			boolean completeRead = false;
			while (!completeRead) {
				if (readLength) {
					channel.read(lengthByteBuffer);
					if (lengthByteBuffer.remaining() == 0) {
						readLength = false;
						dataByteBuffer = ByteBuffer
								.allocate(lengthByteBuffer.getInt(0));
						lengthByteBuffer.clear();
					}
				} else {
					channel.read(dataByteBuffer);
					if (dataByteBuffer.remaining() == 0) {
						completeRead = true;
						ObjectInputStream ois = new ObjectInputStream(
								new ByteArrayInputStream(dataByteBuffer.array()));
						final Serializable ret = (Serializable) ois.readObject();
						// clean up
						dataByteBuffer = null;
						readLength = true;
						return ret;
					}
				}
			}
		}catch(IOException e) {
			e.printStackTrace();
			System.out.println("[Exception] " + e);
		} catch (ClassNotFoundException e) {
			
		}
		return null;
	}

}
