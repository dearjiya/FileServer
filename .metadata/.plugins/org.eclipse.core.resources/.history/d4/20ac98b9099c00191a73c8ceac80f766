package Server;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.util.Iterator;

import Message.Message;
import Message.ServerSocketForObject;

public class EventManager implements Runnable {
	
	private Selector selector;
	private FileServer server;
	
	public EventManager(FileServer fileServer) {
		this.server = fileServer;
	}

	public void run() {
		try {

			selector = Selector.open();
			ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
			serverSocketChannel.configureBlocking(false);// 블로킹방식
			serverSocketChannel.bind(new InetSocketAddress(server.serverPort));
			serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);

			System.out.println("[" + server.serverPort +"] Server Start");

		} catch (IOException e) {
			e.printStackTrace();
		}
		
		while (true) {
			try{
				selector.select();
				System.out.println("Something selected");
				
				Iterator<SelectionKey> keys = selector.selectedKeys().iterator();
				
				while(keys.hasNext()){
					SelectionKey key = (SelectionKey) keys.next();
					keys.remove();
					
					if(!key.isValid()){
						continue;
					}
					if(key.isAcceptable()){
						accept(key);
					}
					else if(key.isReadable()){
						readData(key);
					}
				} 
				
			}catch (IOException e){
				e.printStackTrace();
			}

		}
	}
	
	private void accept(SelectionKey key){
		System.out.println("Accept");
		try{
			ServerSocketChannel serverChannel = (ServerSocketChannel) key.channel();
			SocketChannel channel= serverChannel.accept();
			
			System.out.println("[Connect OK: "+ channel.getRemoteAddress() + ": " + Thread.currentThread().getName() + "]");
			
			channel.configureBlocking(false);
			channel.register(selector, SelectionKey.OP_READ);
			System.out.println(channel.toString() + "client is connected");
		}
		catch(IOException e){
			e.printStackTrace();
		}
	}
	
	private void readData(SelectionKey key) throws IOException{
		System.out.println("ReadData");
		SocketChannel channel = (SocketChannel) key.channel();
		
		try{
			ServerSocketForObject sock = new ServerSocketForObject(channel);
			Message msg = (Message)sock.recv();
			msg.fileServer = this.server;
			msg.socketChannel = channel;
			Message resMsg = msg.handle();
			
//		int numRead = -1;
//			numRead = channel.read(buffer); // return value 가 -1 이면 끊긴것 
//			if(numRead == -1){
//				System.out.println("numRead is -1");
//				channel.close();
//				key.cancel();
//				return;
//			}
			
			sock = new ServerSocketForObject(channel);
			sock.send(resMsg);
		}
		catch(ClassNotFoundException e){
			System.out.println("ClassNotFoundException");
		}
		catch(IOException e){
			System.out.println("IoException");
			e.printStackTrace();
			try {
				channel.close();
			} catch (IOException e1) {
				e1.printStackTrace();
			}
			key.cancel();
			System.out.println("Connection closed.");
			return;
		}
	}
}
